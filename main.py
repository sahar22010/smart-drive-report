import streamlit as st
import matplotlib.pyplot as plt
from fpdf import FPDF
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import random
import os
import numpy as np
from matplotlib.patches import Circle
import requests

# Email settings
SENDER_EMAIL = "smartdrive.report@gmail.com"
APP_PASSWORD = "your_app_password_here"  # Replace with your actual password

def setup_fonts():
    """Download required fonts automatically"""
    # Download standard Arial font if not exists
    if not os.path.exists('arial.ttf'):
        try:
            url = "https://github.com/Hamagrael/Windows-Fonts/raw/main/Arial.ttf"
            r = requests.get(url, allow_redirects=True)
            open('arial.ttf', 'wb').write(r.content)
        except:
            st.warning("Could not download English font")

def create_chart(values):
    categories = ['Speed', 'Focus', 'Calmness', 'Aggression', 'Distraction']
    colors = ['#1f77b4', '#2ca02c', '#ff7f0e', '#d62728', '#9467bd']
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    bars = ax1.bar(categories, values, color=colors)
    ax1.set_title('Driving Behavior Summary', fontsize=12)
    ax1.set_ylim([0, 150])
    
    for bar in bars:
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height,
                 f'{height}%',
                 ha='center', va='bottom', fontsize=10)
    
    overall_score = np.mean(values)
    color = '#2ca02c' if overall_score > 70 else '#ff7f0e' if overall_score > 40 else '#d62728'
    circle = Circle((0.5, 0.5), 0.4, fill=False, linewidth=10, color=color)
    ax2.add_patch(circle)
    ax2.text(0.5, 0.5, f'{overall_score:.0f}%', 
             ha='center', va='center', fontsize=24, fontweight='bold')
    ax2.set_title('Overall Score', fontsize=12)
    ax2.axis('off')
    
    plt.tight_layout()
    chart_path = "chart.png"
    fig.savefig(chart_path, bbox_inches='tight', dpi=150)
    plt.close(fig)
    return chart_path, overall_score

def generate_driving_tip(score):
    tips = {
        'high': "EXCELLENT DRIVING!\n\nYour driving performance is outstanding. "
                "Maintain these high levels of focus and calmness.\n\n"
                "‚Ä¢ Keep safe following distance\n"
                "‚Ä¢ Take regular breaks every 2 hours\n"
                "‚Ä¢ Stay aware of your surroundings",
        'medium': "GOOD DRIVING\n\nYour performance is decent but has room for improvement.\n\n"
                 "‚Ä¢ Increase your focus on the road\n"
                 "‚Ä¢ Reduce distractions\n"
                 "‚Ä¢ Practice defensive driving techniques\n"
                 "‚Ä¢ Maintain safe distance from other vehicles",
        'low': "NEEDS IMPROVEMENT\n\nYour driving performance requires attention.\n\n"
              "‚Ä¢ Focus more on the road ahead\n"
              "‚Ä¢ Reduce aggressive maneuvers\n"
              "‚Ä¢ Avoid sudden acceleration/braking\n"
              "‚Ä¢ Minimize distractions\n"
              "‚Ä¢ Take a driving refresher course"
    }
    
    if score > 80:
        return tips['high']
    elif score > 50:
        return tips['medium']
    else:
        return tips['low']

def generate_pdf(chart_path, values, overall_score):
    pdf = FPDF()
    
    # Setup fonts - using standard Arial
    try:
        pdf.add_font('Arial', '', 'arial.ttf', uni=True)
        font_name = 'Arial'
    except:
        # Fallback to built-in font if Arial not available
        font_name = 'Arial'
    
    # First page - Summary
    pdf.add_page()
    pdf.set_font(font_name, 'B', 24)
    pdf.cell(0, 15, 'SMART DRIVE REPORT', 0, 1, 'C')
    pdf.ln(10)
    
    pdf.set_font(font_name, 'B', 16)
    pdf.cell(0, 10, 'DRIVING PERFORMANCE SUMMARY', 0, 1)
    pdf.ln(5)
    
    # Metrics
    pdf.set_font(font_name, '', 14)
    pdf.cell(0, 8, f'Speed: {values[0]} km/h', 0, 1)
    pdf.cell(0, 8, f'Focus: {values[1]}%', 0, 1)
    pdf.cell(0, 8, f'Calmness: {values[2]}%', 0, 1)
    pdf.cell(0, 8, f'Aggression: {values[3]}%', 0, 1)
    pdf.cell(0, 8, f'Distraction: {values[4]}%', 0, 1)
    pdf.ln(10)
    
    # Chart
    pdf.image(chart_path, x=10, w=190)
    pdf.ln(15)
    
    # Second page - Detailed Tips
    pdf.add_page()
    pdf.set_font(font_name, 'B', 18)
    pdf.cell(0, 10, 'PERSONALIZED DRIVING TIPS', 0, 1)
    pdf.ln(10)
    
    # Driving tip (bigger font)
    tip = generate_driving_tip(overall_score)
    pdf.set_font(font_name, '', 14)  # Larger font for better readability
    pdf.multi_cell(0, 8, tip)
    pdf.ln(15)
    
    # Footer note
    pdf.set_text_color(128, 128, 128)
    pdf.set_font(font_name, 'I', 10)
    pdf.cell(0, 10, 'Note: This is a prototype using simulated data', 0, 1, 'C')
    pdf.cell(0, 10, 'Generated by SmartDrive Analytics', 0, 1, 'C')
    
    pdf.output("driving_report.pdf")
    return True

def send_email(to_email):
    message = MIMEMultipart()
    message["From"] = SENDER_EMAIL
    message["To"] = to_email
    message["Subject"] = "Your SmartDrive Report is Ready!"
    
    body = """
Hello,

Your personalized SmartDrive report is attached. 

This report contains:
- Your driving performance analysis
- Personalized tips for improvement
- Visual summary of your metrics

Drive safe!
The SmartDrive Team
"""
    message.attach(MIMEText(body, "plain"))
    
    with open("driving_report.pdf", "rb") as f:
        part = MIMEApplication(f.read(), Name="SmartDrive_Report.pdf")
        part['Content-Disposition'] = 'attachment; filename="SmartDrive_Report.pdf"'
        message.attach(part)
    
    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(SENDER_EMAIL, APP_PASSWORD)
        server.send_message(message)

def main():
    st.set_page_config(page_title="SmartDrive Report", layout="centered")
    
    # Setup required fonts
    setup_fonts()
    
    st.title("üöó SmartDrive Analytics")
    st.markdown("""
    <p style='text-align: center;'>
    Get your personalized driving report<br>
    <span style='color: gray; font-size: 14px;'>
    Note: This prototype uses simulated data
    </span>
    </p>
    """, unsafe_allow_html=True)
    
    email = st.text_input("Your Email Address")
    
    if st.button("Generate My Report"):
        if email:
            # Generate random driving data
            values = [
                random.randint(60, 140),  # Speed
                random.randint(50, 100),  # Focus
                random.randint(40, 100),  # Calmness
                random.randint(0, 100),   # Aggression
                random.randint(0, 100)    # Distraction
            ]
            
            # Create report
            chart_path, overall_score = create_chart(values)
            if generate_pdf(chart_path, values, overall_score):
                send_email(email)
                st.success("‚úÖ Report sent successfully! Check your email.")
            else:
                st.error("‚ùå Failed to generate report. Please try again.")
        else:
            st.error("‚ö† Please enter a valid email address")


if __name__ == "__main__":
    main()
